package org.sodeac.common.jdbc;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.h2.jdbcx.JdbcDataSource;
import org.junit.Test;
import org.sodeac.common.jdbc.TypedTreeJDBCCruder.Session;
import org.sodeac.common.jdbc.classicmodelcars.CustomerNodeType;
import org.sodeac.common.jdbc.classicmodelcars.OfficeTreeModel;
import org.sodeac.common.jdbc.classicmodelcars.PaymentNodeType;
import org.sodeac.common.misc.CloseableCollector;
import org.sodeac.common.typedtree.BranchNode;
import org.sodeac.common.typedtree.TypedTreeMetaModel.RootBranchNode;

public class CruderTest
{
	@Test
	public void t00001InsertAutogenerated() throws Exception
	{
		try(CloseableCollector closeableCollector = CloseableCollector.newInstance())
		{
			DriverManager.registerDriver(org.h2.Driver.class.newInstance());
			
			String tempDir = System.getProperty("java.io.tmpdir");
			String database = "testautogenkey";
			
			// create database from dump
			
			if(tempDir.endsWith("\\")) {tempDir = tempDir.substring(0, tempDir.length() -1);}
			if(tempDir.endsWith("/")) {tempDir = tempDir.substring(0, tempDir.length() -1);}
			
			new File(tempDir + "/" + database + ".mv.db").delete();
			
			int len;
			byte[] buffer = new byte[1080];
			ZipInputStream zis = closeableCollector.register(new ZipInputStream(new FileInputStream("./src/test/resources/classicmodelcars.zip")));
			ZipEntry zipEntry = zis.getNextEntry();
			while (zipEntry != null) 
			{
				if(! "script.sql".equals(zipEntry.getName()))
				{
					continue;
				}
				FileOutputStream fos = closeableCollector.register(new FileOutputStream(new File(tempDir,zipEntry.getName())));
				while ((len = zis.read(buffer)) > 0)
				{
					fos.write(buffer, 0, len);
				}
				closeableCollector.close(fos);
				zipEntry = zis.getNextEntry();
			}
	        zis.closeEntry();
			
			org.h2.tools.RunScript.execute("jdbc:h2:" + tempDir + "/" + database, "", "",tempDir +"/script.sql", null,false);
			
			new File(tempDir,"script.sql").delete();
			
			JdbcDataSource ds = new JdbcDataSource();
			ds.setURL("jdbc:h2:" + tempDir + "/" + database);
			ds.setUser("");
			ds.setPassword("");
			
			
			TypedTreeJDBCCruder cruder = TypedTreeJDBCCruder.get();
			
			Session session = cruder.openSession(ds);
			
			RootBranchNode<OfficeTreeModel, CustomerNodeType> customer = session.loadRootNode(OfficeTreeModel.customer, 496);
			
			BranchNode<CustomerNodeType, PaymentNodeType> payment = customer.create(CustomerNodeType.PAYMENTS)
				.setValue(PaymentNodeType.PAYMENTAMOUNT, 1.0)
				.setValue(PaymentNodeType.PAYMENTCHECKNUMBER, "xxxxx")
				.setValue(PaymentNodeType.PAYMENTDATE, new Date());
			
			session.persist(payment);
			
			session.flush();
			session.commit();
			
			cruder.close();
			
			Integer retrievedId = payment.getValue(PaymentNodeType.PAYMENTID);
			Connection connection = closeableCollector.register(ds.getConnection());
			
			assertNotNull("value should be correct", retrievedId);
			assertTrue("value should gt 0", retrievedId.intValue() > 0);
			
			PreparedStatement preparedStatement = closeableCollector.register(connection.prepareStatement("select * from PAYMENTS where CHECKNUMBER = ?"));
			
			preparedStatement.setString(1, "xxxxx");
			
			Integer checkedId = null;
			ResultSet resultSet = closeableCollector.register(preparedStatement.executeQuery());
			while(resultSet.next())
			{
				checkedId = resultSet.getInt("ID");
			}	
			closeableCollector.close(resultSet);
			closeableCollector.close(preparedStatement);
			closeableCollector.close(connection);
			
			assertNotNull("value should be correct", checkedId);
			assertEquals("value should be correct", retrievedId, checkedId);
			
			new File(tempDir + "/" + database + ".mv.db").delete();
		}
	}
}
